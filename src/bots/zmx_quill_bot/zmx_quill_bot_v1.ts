import { Message } from 'telegraf/types';
import { Logger } from "../../utils/Logger";
import { Markup, Telegraf } from 'telegraf';
import { MyContext } from "./types/ZMXQuillBotType";
import { formatNumber } from "../../utils/formatNumber";
import { SteamNewsItem } from "../../socialMediaMethods/steam/steamNews/typos/steamNewsType";
import { getGameInfo, getTopSellersIds } from "../../socialMediaMethods/steam/steamGameInfo/steamGameInfo";

require('dotenv').config({ path: '.env.tokens' });

class BotQuill {
  private bot: Telegraf<MyContext>;
  private readonly adminId: number;
  private readonly channelZMXGamesId: string;
  private readonly channelZMXGamesName: string;
  private newsCheckInterval: NodeJS.Timeout | null = null;
  private lastCheckedNews: Set<string> = new Set();
  private messageQueue: { ctx: MyContext; messageId: string }[] = [];
  private isProcessing: boolean = false;

  constructor() {
    this.bot = new Telegraf<MyContext>(process.env.ZMX_QUILL_BOT!);
    this.adminId = Number(process.env.ADMIN_ID);
    this.channelZMXGamesId = process.env.CHANNEL_ZMXGAMES_ID!;
    this.channelZMXGamesName = process.env.CHANNEL_ZMXGAMES_NAME!;

    this.bot.use((ctx, next) => {
      ctx.session = ctx.session || {};
      return next();
    });

    this.initializeBot();
  }

  private initializeBot(): void {
    this.bot.action(/^publish_(.+)$/, (ctx) => this.handlePublish(ctx));
    this.bot.action(/^edit_(.+)$/, (ctx) => this.handleEdit(ctx));
    this.bot.action(/^delete_(.+)$/, (ctx) => this.handleDelete(ctx));
    this.bot.on('message', (ctx) => this.handleMessage(ctx));
    // this.bot.on('channel_post', (ctx) => this.handleChannelPost(ctx)); // ToDo –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –≤ –õ–° –Ω–æ –≤ –∫–∞–Ω–∞–ª –∏—Ö –Ω–µ –¥–æ–±–∞–≤–∏—Ç—å
  }

  private addToQueue(ctx: MyContext, messageId: string): void {
    this.messageQueue.push({ ctx, messageId });
    Logger.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å c id: [${messageId}]`);
    this.processQueue();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ –õ–°
  private async handleChannelPost(ctx: MyContext): Promise<void> {
    if (!ctx.channelPost || !('text' in ctx.channelPost)) return;

    // –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @)
    const channelUsername = ctx.channelPost.chat.username;
    const targetChannel = this.channelZMXGamesName.replace('@', '');

    console.log('–ü–æ–ª—É—á–µ–Ω –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞:', channelUsername);
    console.log('–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª:', targetChannel);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ username –∫–∞–Ω–∞–ª–∞ —Å —Ü–µ–ª–µ–≤—ã–º
    if (channelUsername === targetChannel) {
      const text = ctx.channelPost.text.toLowerCase();

      if (text.includes('–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ') && text.includes('—Ä–∞–∑–º–µ—Ä')) {
        try {
          await this.bot.telegram.forwardMessage(
            this.adminId,
            ctx.channelPost.chat.id,
            ctx.channelPost.message_id
          );
          Logger.green('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
        } catch (error) {
          Logger.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
          console.error(error);
        }
      }
    }
  }

  private async processQueue(): Promise<void> {
    if (this.isProcessing || this.messageQueue.length === 0) return;
    this.isProcessing = true;

    while (this.messageQueue.length > 0) {
      const { ctx, messageId } = this.messageQueue[0];
      try {
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å id: ${messageId}`);
        await this.handleMessage(ctx);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageId}`, error);
      }
      this.messageQueue.shift();
    }
    this.isProcessing = false;
  }

  private async handleMessage(ctx: MyContext): Promise<void> {
    if (!ctx.message) return;
    await this.sendGameInfo(ctx);
  }

  private async handlePublish(ctx: MyContext): Promise<void> {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;

    const newsId = ctx.callbackQuery.data.replace('publish_', '');
    const message = ctx.callbackQuery.message as Message.TextMessage;

    try {
      await this.bot.telegram.sendMessage(
        this.channelZMXGamesId,
        message.text,
        { parse_mode: 'HTML' }
      );
      await ctx.editMessageText(
        `${message.text}\n\n‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ`,
        { parse_mode: 'HTML' }
      );
      Logger.green(`–ù–æ–≤–æ—Å—Ç—å ${newsId} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ`);
    } catch (error) {
      Logger.red(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ ${newsId}`);
      console.log(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ ${newsId}:`, error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏');
    }
  }

  private async handleEdit(ctx: MyContext): Promise<void> {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;

    const newsId = ctx.callbackQuery.data.replace('edit_', '');
    await ctx.reply(
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:',
      { reply_markup: { force_reply: true } }
    );
    ctx.session.editingNewsId = newsId;
  }

  private async sendNewsToAdmin(text: string, newsId: string): Promise<void> {
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', `publish_${newsId}`),
        Markup.button.callback('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_${newsId}`),
        Markup.button.callback('–£–¥–∞–ª–∏—Ç—å', `delete_${newsId}`)
      ]
    ]);

    await this.bot.telegram.sendMessage(
      this.adminId,
      text,
      {
        parse_mode: 'HTML',
        ...keyboard
      }
    );
  }

  private async checkNews(): Promise<void> {
    try {
      if (this.lastCheckedNews.size > 100) {
        const values = Array.from(this.lastCheckedNews);
        this.lastCheckedNews = new Set(values.slice(-50));
      }
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
    }
  }

  private formatNewsMessage(news: SteamNewsItem): string {
    const date = new Date(news.date * 1000).toLocaleString();
    return `
<b>${news.title}</b>

${news.contents}

üìÖ ${date}
üë§ ${news.author}
üîó <a href="${news.url}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
`;
  }

// –ú–µ—Ç–æ–¥ —Å —Ü–∏–∫–ª–æ–º –ø–æ –º–∞—Å—Å–∏–≤—É id
//   sendGameInfo = async (ctx: any) => {
//     try {
//       const gameIds = await getTopSellersIds();
//
//       for (const id of gameIds) {
//         try {
//           const gameInfo = await getGameInfo(id);
//           const formattedDate = new Date().toLocaleString('ru-RU', {
//             year: 'numeric',
//             month: 'long',
//             day: 'numeric',
//             hour: 'numeric',
//             minute: 'numeric',
//           });
//
//           const message = `
// <b>–ò–≥—Ä–∞:</b> ${gameInfo.nameGame} \n
// <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${gameInfo.description} \n\n
// <b>üü¢ –û–Ω–ª–∞–π–Ω:</b> ${formatNumber(gameInfo.currentPlayers)} \n
//
// üìÖ <i>${formattedDate}</i>
//                 `;
//
//           if (gameInfo.urlImg) {
//             await ctx.replyWithPhoto(gameInfo.urlImg, {
//               caption: message,
//               parse_mode: 'HTML'
//             });
//           } else {
//             await ctx.reply(message, { parse_mode: 'HTML' });
//           }
//
//           // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ñ–ª—É–¥–∞
//           await new Promise(resolve => setTimeout(resolve, 1000));
//
//         } catch (error) {
//           console.log(`Error processing game ${id}:`, error);
//           continue; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–æ–π –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É
//         }
//       }
//     } catch (error) {
//       console.log('Error getting top sellers:', error);
//     }
//   };

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∏–≥—Ä–µ –ø–æ id
//   sendGameInfo = async (ctx: any) => {
//     const gameInfo = await getGameInfo(2073850);
//     const formattedDate = new Date().toLocaleString('ru-RU', {
//       year: 'numeric',
//       month: 'long',
//       day: 'numeric',
//       hour: 'numeric',
//       minute: 'numeric',
//     });
//
//     const message = `
// <b>–ò–≥—Ä–∞:</b> ${gameInfo.nameGame} \n
// <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${gameInfo.description} \n\n
// <b>üü¢ –û–Ω–ª–∞–π–Ω:</b> ${formatNumber(gameInfo.currentPlayers)} \n
//
// üìÖ <i>${formattedDate}</i>
//     `;
//
//     try {
//       if (gameInfo.urlImg) {
//         await ctx.replyWithPhoto(gameInfo.urlImg, {
//           caption: message,
//           parse_mode: 'HTML'
//         });
//       } else {
//         await ctx.reply(message, { parse_mode: 'HTML' });
//       }
//     } catch (error) {
//       console.log(error);
//     }
//   };

  sendGameInfo = async (ctx: any) => {
    try {
      const gameIds = await getTopSellersIds();
      const formattedDate = new Date().toLocaleString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: 'numeric',
        minute: 'numeric',
      });

      let message = '<b>üî• –û–Ω–ª–∞–π–Ω –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–≥—Ä –≤ Steam:</b>\n\n';

      for (const id of gameIds) {
        try {
          const gameInfo = await getGameInfo(id);
          message += `<b><a href="${gameInfo.urlSteam}">${gameInfo.nameGame}</a></b>\n`;
          message += `üü¢ ${formatNumber(gameInfo.currentPlayers)} –æ–Ω–ª–∞–π–Ω\n\n`;
        } catch (error) {
          console.log(`Error processing game ${id}:`, error);
          continue;
        }
      }

      message += `\nüìÖ <i>${formattedDate}</i>`;

      await ctx.reply(message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });

    } catch (error) {
      console.log('Error getting top sellers:', error);
    }
  };

  private async handleDelete(ctx: MyContext): Promise<void> {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;

    try {
      await ctx.deleteMessage();
      Logger.green(`–ù–æ–≤–æ—Å—Ç—å ${ctx.callbackQuery.data.replace('delete_', '')} —É–¥–∞–ª–µ–Ω–∞`);
    } catch (error) {
      Logger.red(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: ${error}`);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏');
    }
  }

  private startNewsCheck(): void {
    if (this.newsCheckInterval) {
      clearInterval(this.newsCheckInterval);
    }
    this.newsCheckInterval = setInterval(() => this.checkNews(), 5 * 60 * 1000);
  }

  public async start(): Promise<void> {
    try {
      await this.bot.launch();
      console.log('Steam News Bot –∑–∞–ø—É—â–µ–Ω');
      Logger.green('–ù–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ CS2');
      await this.checkNews();
      this.startNewsCheck();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
      await this.restart();
    }
  }

  public async stop(reason: string): Promise<void> {
    if (this.newsCheckInterval) {
      clearInterval(this.newsCheckInterval);
    }
    Logger.red(`–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}`);
    await this.bot.stop(reason);
  }

  public async restart(): Promise<void> {
    await this.stop('RESTART');
    Logger.red('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...');
    setTimeout(async () => {
      this.bot = new Telegraf<MyContext>(process.env.ZMX_QUILL_BOT!);
      this.initializeBot();
      await this.start();
    }, 10000);
  }
}

const steamNewsBot = new BotQuill();
steamNewsBot.start();