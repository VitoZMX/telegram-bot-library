import { exec } from 'child_process';

import util from 'util';
import { Logger } from "./Logger";

const execPromise = util.promisify(exec);

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç PM2
 */
interface PM2Process {
  name: string;
  id: number;
  pid: number;
  status: string;
  cpu: string;
  memory: string;
  uptime: string;
  restarts: number;
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç PM2
 */
export class PM2Manager {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PM2 –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
   */
  async getProcessList(): Promise<string> {
    Logger.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PM2');
    try {
      const { stdout } = await execPromise('pm2 list');
      Logger.log('–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PM2 —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
      return stdout;
    } catch (error) {
      Logger.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PM2');
      console.error(error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PM2');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
   */
  async getProcessesInfo(): Promise<PM2Process[]> {
    Logger.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö PM2');
    try {
      const { stdout } = await execPromise('pm2 jlist');
      const processes = JSON.parse(stdout);
      return processes.map((proc: any) => ({
        name: proc.name,
        id: proc.pm_id,
        pid: proc.pid,
        status: proc.pm2_env.status,
        cpu: proc.monit?.cpu?.toString() || '0',
        memory: this.formatMemory(proc.monit?.memory || 0),
        uptime: this.formatUptime(proc.pm2_env?.pm_uptime),
        restarts: proc.pm2_env?.restart_time || 0
      }));
    } catch (error) {
      Logger.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö PM2');
      console.error(error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö PM2');
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
   */
  formatProcessesInfo(processes: PM2Process[]): string {
    let output = 'üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö:</b>\n\n';

    processes.forEach(proc => {
      output += `üîπ <b>${proc.name}</b> (ID: ${proc.id})\n`;
      output += `‚îú‚îÄ‚îÄ –°—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(proc.status)} ${proc.status}\n`;
      output += `‚îú‚îÄ‚îÄ PID: ${proc.pid}\n`;
      output += `‚îú‚îÄ‚îÄ CPU: ${proc.cpu}%\n`;
      output += `‚îú‚îÄ‚îÄ –ü–∞–º—è—Ç—å: ${proc.memory}\n`;
      output += `‚îú‚îÄ‚îÄ –ê–ø—Ç–∞–π–º: ${proc.uptime}\n`;
      output += `‚îî‚îÄ‚îÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏: ${proc.restarts}\n\n`;
    });

    return output;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
   */
  private getStatusEmoji(status: string): string {
    switch (status.toLowerCase()) {
      case 'online':
        return 'üü¢';
      case 'stopped':
        return 'üî¥';
      case 'errored':
        return '‚õî';
      case 'launching':
        return 'üü°';
      default:
        return '‚ö™';
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏, —ç–∫—Ä–∞–Ω–∏—Ä—É—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –±—É—Ñ–µ—Ä—ã
   */
  formatLogs(logs: string): string {
    Logger.log('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤');

    return logs
      // –ó–∞–º–µ–Ω—è–µ–º HTML-—Ç–µ–≥–∏ –Ω–∞ –∏—Ö —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤ - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
      .replace(/<Buffer[^>]+>/g, '[Binary Buffer]')
      // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ–¥–Ω—É
      .replace(/\n\s*\n\s*\n/g, '\n\n')
      // –£–±–∏—Ä–∞–µ–º ANSI escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      .replace(/\u001b\[\d+m/g, '')
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ [Symbol(...)]
      .replace(/\[Symbol\([^\)]+\)\]/g, match => `[${match}]`)
      // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–µ—Ñ–∏–∫—Å—ã PM2 (–Ω–∞–ø—Ä–∏–º–µ—Ä, "0|TG_caret |")
      .split('\n')
      .map(line => line.replace(/^\d+\|[^|]+\|/, '').trim())
      .join('\n')
      // –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è PM2
      // .replace(/\[TAILING\].*option\)/g, '')
      // .replace(/\/root\/\.pm2\/logs\/.*last \d+ lines:/g, '')
      // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
      .trim();
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
   */
  private formatMemory(bytes: number): string {
    const mb = bytes / 1024 / 1024;
    return `${mb.toFixed(2)} MB`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
   */
  private formatUptime(timestamp: number): string {
    if (!timestamp) return 'N/A';

    const uptime = Date.now() - timestamp;
    const days = Math.floor(uptime / (24 * 60 * 60 * 1000));
    const hours = Math.floor((uptime % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
    const minutes = Math.floor((uptime % (60 * 60 * 1000)) / (60 * 1000));

    let result = '';
    if (days > 0) result += `${days}–¥ `;
    if (hours > 0) result += `${hours}—á `;
    result += `${minutes}–º`;

    return result;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ PM2
   */
  async getProcessLogs(processId: number): Promise<string> {
    Logger.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ PM2 —Å ID ${processId}`);
    try {
      const { stdout } = await execPromise(`pm2 logs ${processId} --lines 10 --nostream`);
      Logger.log(`–õ–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ ${processId} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã`);
      return this.formatLogs(stdout);
    } catch (error) {
      Logger.red(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ ${processId}`);
      console.error(error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ ${processId}`);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ PM2 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
   */
  formatOutput(output: string, maxLength: number = 4000): string {
    const formattedOutput = this.formatLogs(output);

    return formattedOutput.length > maxLength
      ? formattedOutput.substring(0, maxLength) + '...\n[–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –¥–ª–∏–Ω—ã]'
      : formattedOutput;
  }
}